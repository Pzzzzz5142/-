$程序 -> $其他函数定义

$其他函数定义 -> $类型 $标识符 $函数定义 $其他函数定义 | $全局变量声明 $其他函数定义 | null

$全局变量声明 -> $struct语句 ;

$函数定义 -> qua_fuc_init ( $形参列表 ) { $函数体 qua_endfun } | $声明语句tmp2 ;

$形参列表 -> $形参 $其他形参 | null

$其他形参 -> , $形参 $其他形参 | null

$形参 -> $类型 $形参tmp1 

$形参tmp1 -> $标识符 qua_declare_param $声明语句tmp2_1



$函数体 -> $总结构 $函数体 | $循环跳转 $函数体 | null

$总结构 -> $顺序结构 | $循环结构 | $分支结构1

$顺序结构 -> $语句 qua_pop_type ;



$分支结构1 -> if ( $表达式 ) qua_if1 { $函数体 qua_if2 } $分支结构2 qua_endif

$分支结构2 -> else $分支结构3 | null 

$分支结构3 -> qua_el { $函数体 qua_ee } | $分支结构1



$循环结构 -> while qua_wh1 ( $表达式 ) { qua_wh2 $函数体 qua_wh3 } | for ( $for_list_0 ; quafor $for_list_1 quafdo ; qua_ss $for_list_2 quasav ) { $函数体 quafe }

$for_list_0 -> $语句 | null

$for_list_1 -> $表达式 | null

$for_list_2 -> $语句 | null

$循环跳转 -> continue qua_continue qua_check_jump ; | break qua_break qua_check_jump ;

$输入语句 -> getc $标识符 qua_getc qua_check_def_e quad

$输出语句 -> putc $输出字符 qua_putc qua_check_def_e quad | puts $字符串常量 qua_puts

$输出字符 -> $标识符 | $字符型常量

$赋值语句 -> quap $赋值语句tmp | $函数调用 | null

$赋值语句tmp -> $数组方括号 = qua_save_op $表达式 qua_op | . $标识符 quap qua_member = qua_save_op $表达式 qua_op | = qua_save_op $表达式 qua_op

$函数调用 -> qua_call_init ( $实参列表 qua_call )

$实参列表 -> $实参 $其他实参 | null

$其他实参 -> , $实参 $其他实参 | null

$实参 -> $标识符 $数组方括号 qua_saveP | $常量 qua_contrastC

$返回值 -> $表达式 qua_reth | null

$类型 -> int qua_save_type | float qua_save_type | bool qua_save_type | char qua_save_type



$表达式 -> $关系运算

	$关系运算 -> $tmp3_2 $tmp3_1

	$tmp3_1 -> > qua_save_op $tmp3_2 qua_op | >= qua_save_op $tmp3_2 qua_op | < qua_save_op $tmp3_2 qua_op | <= qua_save_op $tmp3_2 qua_op | == qua_save_op $tmp3_2 qua_op | != qua_save_op $tmp3_2 qua_op | null

	$tmp3_2 -> $算术运算

	$算术运算 -> $tmp5_2 $tmp5_1

	$tmp5_1 -> + qua_save_op $tmp5_2 qua_op $tmp5_1 | - qua_save_op $tmp5_2 qua_op $tmp5_1 | null

	$tmp5_2 -> $tmp5_4 $tmp5_3

	$tmp5_3 -> * qua_save_op $tmp5_4 qua_op $tmp5_3 | / qua_save_op $tmp5_4 qua_op $tmp5_3 | null

	$tmp5_4 -> $tmp8

$tmp8 -> $原子结合 | ! $原子结合 | - $原子结合 qua.

$原子结合 -> $标识符 quap qua_check_def_e $原子结合tmp | $常量 quap | ( $表达式 )

$原子结合tmp -> $数组方括号 | . $标识符 quap qua_member | $函数调用 | null

$语句 -> $类型 $声明语句1 | $标识符 $赋值语句 | return qua_return_init $返回值 qua_fun_return | $输出语句 | $输入语句 | $struct语句

$struct语句 -> struct qua_gen_func_name $标识符 qua_declare_struct_id $自定义结构声明或定义

$自定义结构声明或定义 -> $自定义结构声明 | $自定义结构定义

$自定义结构声明 -> $标识符 qua_struct_check_def qua_struct_declare

$自定义结构定义 -> { qua_struct_def qua_new_synbl_struct $声明语句2 ; $声明语句块 }

$声明语句1 -> $标识符 $声明语句tmp2_1 qua_declare_id

$声明语句tmp2_1 -> $声明语句tmp2 qua_declare_id | qua_declare_id $声明语句tmp3

$声明语句tmp2 -> [ $整型常量 qua_declare_arr ] | null qua_declare_id

$声明语句tmp3 -> = qua_save_op $表达式 qua_op

$声明语句2 -> $类型 $标识符 qua_declare_id $声明语句tmp2 qua_instruct_declare

$声明语句块 -> $声明语句2 ; $声明语句块 | null

$标识符 -> @I

$数组索引 -> $标识符 quap qua_check_def_e | $整型常量 quap

$数组方括号 -> [ $数组索引 ] qua[] | null

$常量 -> $整型常量 | $实型常量 | $布尔常量 | $字符型常量 | $字符串常量

$整型常量 -> @INT

$实型常量 -> @FLT

$字符型常量 -> @CH

$字符串常量 -> @STR

$布尔常量 -> true | false